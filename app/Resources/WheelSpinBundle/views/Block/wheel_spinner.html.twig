
<div class="form-content" style="margin-bottom: 50px; margin-top: 70px">
    {% if order.status != constant('OrderBundle\\Entity\\Order::STATUS_COMPLETED') %}
        <h4 class="wheel_title">{{ 'frontend.title_1'|trans([], 'WheelSpinBundle') }}</h4>
    {% elseif order.isSpin %}
        <h4 class="wheel_title">{{ 'frontend.title_2'|trans([], 'WheelSpinBundle') }}</h4>
    {% elseif order.status == constant('OrderBundle\\Entity\\Order::STATUS_COMPLETED') %}
        <h4 class="wheel_title">{{ 'frontend.title_3'|trans([], 'WheelSpinBundle') }}</h4>
    {% endif %}
</div>

<div class="order-form" style="margin-bottom: 70px">
    <div class="order-form-content">
        <div class="wheel_box">
            <canvas id="spinWheel"></canvas>
            <button id="spin_btn">Spin</button>
            <img src="{{ asset('bundles/app/images/spinner-arrow.svg') }}" id="spinnerArrow" alt="spinner-arrow" />
        </div>

    </div>
    <div class="order-form-total wheel_container">
        <div class="top-block">
            <h4>{{ 'frontend.prizes'|trans([], 'WheelSpinBundle') }}</h4>
        </div>
        <div class="wheel_prize_container">
            {% for spinValue in spinValuesTable.WheelSpinHasOption %}
                <div id="{{ spinValue.id }}"
                     class="wheel_prize {{ order.isSpin and order.wheelSpinOption.id == spinValue.wheelSpinOption.id ? 'active' : '' }}">
                    {{ spinValue.label }}. {{ spinValue.wheelSpinOption.getPrizeName }}
                </div>
            {% endfor %}
        </div>
    </div>
</div>

{% set block_ajax_path = block.page is defined ? sonata_page_ajax_url(block) : block_ajax_url(block) %}

{% block footer_javascripts %}
     <!---------------  Chart JS  --------------------->
     <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
     <!---------------  Chart JS Plugin  --------------------->
     <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.1.0/chartjs-plugin-datalabels.min.js"></script>

     <script>
         /* --------------- Spin Wheel  --------------------- */
         const spinWheel = document.getElementById("spinWheel");
         const spinBtn = document.getElementById("spin_btn");
         spinBtn.disabled = {{ order.isSpin or order.status != constant('OrderBundle\\Entity\\Order::STATUS_COMPLETED') ? 1 : 0 }}
         /* --------------- Minimum And Maximum Angle For A value  --------------------- */
         const spinValues = {{ spinValues|raw }};
         const spinValuesJson = {{ spinValuesJson|raw }};
         /* --------------- Size Of Each Piece  --------------------- */
         const size = spinValues.map(item => item.size);
         /* --------------- Background Colors  --------------------- */
         const spinColors = spinValues.map(item => item.color);
         /* --------------- Chart --------------------- */
         /* --------------- Guide : https://chartjs-plugin-datalabels.netlify.app/guide/getting-started.html --------------------- */
         let spinChart = new Chart(spinWheel, {
             plugins: [ChartDataLabels],
             type: "pie",
             data: {
                 labels: spinValues.map(item => item.label),
                 datasets: [
                     {
                         backgroundColor: spinColors,
                         data: size,
                     },
                 ],
             },
             options: {
                 responsive: true,
                 animation: { duration: 0 },
                 plugins: {
                     tooltip: false,
                     legend: {
                         display: false,
                     },
                     datalabels: {
                         rotation: 90,
                         color: "#ffffff",
                         formatter: (_, context) => context.chart.data.labels[context.dataIndex],
                         font: { size: 24 },
                     },
                 },
             },
         });
         /* --------------- Display Value Based On The Angle --------------------- */
         const highlightingPrizes = (angleValue) => {
             for (let i of spinValuesJson) {
                 if (angleValue >= i.minDegree && angleValue <= i.maxDegree) {
                     clearStyle();
                     const prize = document.getElementById(i.id);
                     prize.style.backgroundColor = i.color;
                     prize.style.color = '#fff';
                     break;
                 }
             }
             spinBtn.disabled = false;
         }

         const generateValue = (angleValue) => {
             for (let i of spinValuesJson) {
                 if (angleValue >= i.minDegree && angleValue <= i.maxDegree) {
                     const prize = document.getElementById(i.id);
                     prize.classList.add("active");
                     spinBtn.disabled = false;
                     break;
                 }
             }
         };

         const clearStyle = () => {
             const wheelPrizes = document.querySelectorAll('.wheel_prize');
             for (let i = 0; i < wheelPrizes.length; i++) {
                 wheelPrizes[i].removeAttribute('style');
             }
         }

         /* --------------- Spinning Code --------------------- */
         let count = 0;
         let resultValue = 101;
         spinBtn.addEventListener("click", () => {
             spinBtn.disabled = true;

             $.ajax({
                 type: 'POST',
                 url: '{{ block_ajax_path }}',
                 data: { order_id: '{{ order.id }}' },
                 success: function (response) {
                     let randomDegree = response.spin;
                     let rotationInterval = window.setInterval(() => {
                         spinChart.options.rotation = spinChart.options.rotation + resultValue;
                         // highlightingPrizes(spinChart.options.rotation);
                         spinChart.update();
                         if (spinChart.options.rotation >= 360) {
                             count += 1;
                             resultValue -= 5;
                             spinChart.options.rotation = 0;
                         } else if (count > 15 && spinChart.options.rotation === randomDegree) {
                             generateValue(randomDegree);
                             clearInterval(rotationInterval);
                             count = 0;
                             resultValue = 101;
                         }
                     }, 10);
                 }
             });
         });
         /* --------------- End Spin Wheel  --------------------- */
     </script>
{% endblock %}

